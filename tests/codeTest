// Declarations
int a, k;
float b;
matrix c[3];
matrix matrix_s[3][3];
int a = 5;
float b = -3.14;
matrix c[3] = {1, -2, 3};
matrix matrix_s[3][3] = {{1, 2, 3}, {4, -5, 6}, {7, 8, 9}};
int a, b, c =6, f;
matrix c;
{
    a=3;
    z=3;
}
// a = {3, 3}; erreur mais normal

// Function declarations
int main() {}
int add(int x, int y){}
float subtract(){}
matrix printmat(int m){}
void multiply(matrix m1[3])
{
    return 4;
}

// Return
return a;
return a+b;
return a[3][2];


// Boucles
for (int i = 0; i < 3; ++i) {
    printf("Value at matrix[1][%d]: %f\n", i, matrix_s[1][i]);
}

for (int i = 0; i < 3; i++)
{
    printf("Value at matrix[1][%d]: %f\n", i, matrix_s[1][i]);
    for (int i = 0; i < 3; i++)
    {
        printf("Value at matrix[1][%d]: %f\n", i, matrix_s[1][i]);
    }
}

while (count < 5) {
    printf("Count: %d\n", count);
    ++count;
    fdp = 7;
}

// Conditionnelles

if(a > b){
    printf("a is greater than b\n");
}
else{
    printf("b is greater than or equal to a\n");
}

if(a > b){
    printf("a is greater than b\n");
}
else if(a == b){
    printf("a is equal to b\n");
}
else{
    printf("b is greater than a\n");
}

// Expressions
a = 5;
b = -c[3][4];
a++;
++a;
b--;
--b;
a = 5 * (1 + 2);
c = a + b;
d = a - b;
e = a * b;
f = a / b;
g = a % b;
h = a > b;
i = a < b;
j = a >= b;
k = a <= b;
l = a == b;
m = a != b;
n = a && b;
o = a || b;
p = !a;
a = (float)(i * 3 + j);

// Appels de fonctions
printmat(matrix_s);
printf("frfr", r);
printf(b, sum);
printf("Difference: %d\n", "difference");
printf("Product: %d\n", product);
printf("Quotient: %d\n", quotient);
printf();
// printf(matrix s, product); normal


// Matrices
matrix matrix_s[3][3] = {{1, 2, 3}, {4, -5, 6}, {7, 8, 9}};
matrix matrix_t[3] = {1, 4, 7};
a = ~matrix_s;
A[0..1][*];
a = A[0..1][*];
a = A[0..1][2..3];
a = A[0 ;2][0..1 ;3];
a = A[0 ;0][0..1 ;1];
a = A[0][* ;*];
